set nocompatible
filetype indent plugin on
syntax on

set autoindent
set backspace=indent,eol,start
set hidden
set incsearch
set ruler
set wildmenu
set noerrorbells
set tabstop=2 softtabstop=2
set shiftwidth=2
set expandtab
set smartindent
set relativenumber
set smartcase
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set laststatus=2
set splitbelow
set hlsearch
set scrolloff=8
set wrap linebreak
set showbreak=" "
set cursorline
set colorcolumn=80

if executable('rg')
  let g:rg_derive_root = 'true'
endif

let mapleader = "\<Space>"
let maplocalleader = "\<Space>"
let g:netrw_browse_split = 0
let g:netrw_banner = 0
let g:netrw_winsize = 25
let g:netrw_liststyle = 3

 let g:ale_linters = {
\   'go': ['gopls'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint', 'tsserver'],
\}

let g:ale_fixers = {
\ '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier','eslint'],
\   'typescript': ['prettier', 'eslint'],
\}

let g:ale_typescript_prettier_use_local_config = 1
let g:ale_completion_tsserver_autoimport = 1
let g:ale_fix_on_save = 1
let g:colorizer_auto_filetype='css'
let g:tmux_navigator_no_mappings = 1

" Set coc to complete on tab
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

nnoremap <c-p> :GFiles <cr>
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <leader>u :UndotreeShow<cr>
nnoremap <leader>ps :Rg<cr>
nmap <leader>gd <Plug>(coc-definition)
nmap <leader>gr <Plug>(coc-references)
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" autocmd FileType javascript nnoremap <buffer> <localleader>c I// <esc>
" autocmd FileType typescript nnoremap <buffer> <localleader>c I// <esc>
" autocmd FileType vim nnoremap <buffer> <localleader>c I" <esc>

function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{StatuslineGit()}
set statusline+=%#LineNr#
set statusline+=\ %f
set statusline+=%m
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=
